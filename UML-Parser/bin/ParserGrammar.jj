/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
 
 options{  static = false;}PARSER_BEGIN (SyntaxAnalyser)import java.io.*;
import java.io.FileWriter;
import java.nio.charset.*;
import net.sourceforge.plantuml.*;
import java.awt.image.*;
import javax.imageio.*;
import java.util.*;
import java.lang.*;

public class SyntaxAnalyser{
	public static void main(String args[])throws ParseException , IOException
	{
	  String line = null;
	  int i=0;
	  String ClassName = "";
	  FileInputStream fis = null;
	  File file =new File("JavaInput.java");
	  File outputFile = new File("umlInput.txt");
	  FileWriter fw = new FileWriter(outputFile.getAbsoluteFile());	  BufferedWriter bw = new BufferedWriter(fw);	  String UmlData =""; 
		try
		{
		   
			UmlData +="@startuml"+'\n';            SyntaxAnalyser analyser = new SyntaxAnalyser(new FileInputStream(file));            while(true)            {
                ClassName = analyser.GetId();
                if(ClassName != "0")
                {                           	
					UmlData+= ClassName+'\n';
					System.out.println(UmlData);
				}                else
                {
	                System.out.println("else");
					String EndUml = "@enduml";
					UmlData += EndUml;
					bw.write(UmlData);
					bw.close();
					break;	            }
             
			}
			
			ByteArrayOutputStream output = new ByteArrayOutputStream();
			UmlData = "";
			BufferedReader br = new BufferedReader(new FileReader(outputFile));
			while ((line = br.readLine()) != null) {
       			UmlData+=line+'\n';
    		}
    		System.out.println(UmlData);
			SourceStringReader reader=new SourceStringReader(UmlData);
			String desc =reader.generateImage(output);
			byte [] data = output.toByteArray();
			InputStream inputImageStream = new ByteArrayInputStream(data);
			BufferedImage umlImage = ImageIO.read(inputImageStream);
			ImageIO.write(umlImage, "png", new java.io.File("D:\\image.png"));

			System.out.print(desc);
		   
		}catch(FileNotFoundException ex){
	  		System.out.println("FIle not found");
		}catch(IOException ex)		{
		  System.out.println("FIle not found1");		}
		}}PARSER_END(SyntaxAnalyser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : {  < PUBLIC : "public" >| < CLASS : "class" >| < STATIC : "static" >
| < EXTENDS : "extends" >
| < INT : "int" >
| < FLOAT : "float" >
| < ID: ["a"-"z","A"-"Z"] >
| < IMPLEMENTS:"implements" >
| < DELIMITER :",">
}String GetId():
{
	String className;
}
{
  className = keyword()  {
    return className;  }|< EOF >  {    return "0";  }
}


String keyword() :{ 	 String output;
 	 String id = "";
 	 Token idName=null;
 	 Token InheritedClass = null;
 	 Token ImplementedClass = null;
 	 String[] interfaceList=new String[9999];
 	 //String Name = null;
 	 boolean i = false;}{  < PUBLIC>< CLASS> ( idName = <ID>) (< EXTENDS> (InheritedClass = < ID>))*
  (< IMPLEMENTS>(ImplementedClass = < ID>(< DELIMITER> < ID>)*))*  {
      
   	  if(ImplementedClass.toString().contains(","))
   	  {
   	    interfaceList = ImplementedClass.toString().split(",");
		   	  }
   	  else   	  {
   	    interfaceList[0]=  ImplementedClass.toString();   	  }  
      if(InheritedClass != null && interfaceList.length==0)
      {              id = "class" + InheritedClass.toString()+ "<|--" +"class" + " " + idName.toString();
      return id;
	  }
	  else if(interfaceList.length !=0 && InheritedClass==null )	  {
	    for (int j=0;j<interfaceList.length;j++)
	    {	      
	    id = interfaceList[j] + "()-"+"class"+idName.toString();
	    return id;
	    }	  }
	  else if(ImplementedClass !=null && InheritedClass != null)
	  {
	    id = "class" + InheritedClass.toString()+ "<|--" +"class" + " " + idName.toString()+"\n";
	    for (int j=0;j<interfaceList.length;j++)
	    {
	      id+= interfaceList[j]+" "+"()-"+" "+idName.toString();
	      return id;
	    }
	    	  }
	else	{
	   id =  "class" + " " + idName.toString();
	    return id;
	 }  }}