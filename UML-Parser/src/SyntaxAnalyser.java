/* Generated By:JavaCC: Do not edit this line. SyntaxAnalyser.java */
import java.io.*;
import java.io.FileWriter;
import java.nio.charset.*;
import net.sourceforge.plantuml.*;
import java.awt.image.*;
import javax.imageio.*;
import java.util.*;
import java.lang.*;


public class SyntaxAnalyser implements SyntaxAnalyserConstants {
    HashMap<String, String> dependencyMap = new HashMap<String, String>();
        public static void main(String args[])throws ParseException , IOException
        {
          String line = null;
          int i=0;
          String ClassName = "";
          FileInputStream fis = null;
          File file =new File("JavaInput.java");
          File outputFile = new File("umlInput.txt");
          FileWriter fw = new FileWriter(outputFile.getAbsoluteFile());
          BufferedWriter bw = new BufferedWriter(fw);

          String UmlData ="";
                try
                {

                        UmlData +="@startuml"+'\u005cn';
            SyntaxAnalyser analyser = new SyntaxAnalyser(new FileInputStream(file));
            while(true)
            {
                ClassName = analyser.GetId();
                if(ClassName != "0")
                {
                                        UmlData+= ClassName+'\u005cn';

                                }
                else
                {

                                        String EndUml = "@enduml";
                                        UmlData += EndUml;
                                        bw.write(UmlData);
                                        bw.close();
                                        break;
                    }

                        }

                        ByteArrayOutputStream output = new ByteArrayOutputStream();
                        UmlData = "";
                        BufferedReader br = new BufferedReader(new FileReader(outputFile));
                        while ((line = br.readLine()) != null) {
                        UmlData+=line+'\u005cn';
                }

                        SourceStringReader reader=new SourceStringReader(UmlData);
                        String desc =reader.generateImage(output);
                        byte [] data = output.toByteArray();
                        InputStream inputImageStream = new ByteArrayInputStream(data);
                        BufferedImage umlImage = ImageIO.read(inputImageStream);
                        ImageIO.write(umlImage, "png", new java.io.File("D:\u005c\u005cimage.png"));



                }catch(FileNotFoundException ex){
                        System.out.println("FIle not found");
                }catch(IOException ex)
                {
                  System.out.println("File not found1");
                }

}

  final public String GetId() throws ParseException, IOException {
        String className;
        String id ="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
    case IMPORT:
      className = keyword();
    {if (true) return className;}
      break;
    case 0:
      jj_consume_token(0);
     Set setDependency = dependencyMap.entrySet();
         Iterator iterator = setDependency.iterator();
         while(iterator.hasNext()) {
                  Map.Entry mentry = (Map.Entry)iterator.next();
                  System.out.println(mentry.getKey().toString() + " "+mentry.getValue().toString());
                  id+="\u005cnclass\u005ct"+mentry.getKey().toString()+" -- "+"class\u005ct"+mentry.getValue().toString();
                  //System.out.println(id);    
              }
    File outputFile = new File("umlInput.txt");
        //FileWriter fw1 = new FileWriter(outputFile.getAbsoluteFile());
        //BufferedWriter bw1 = new BufferedWriter(fw1);
    FileWriter writer = new FileWriter(outputFile);
    writer.write(id);
    writer.flush();
    writer.close();
     {if (true) return "0";}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String keyword() throws ParseException {
         String output;
         String id = "";
         Token idName=null;
         Token InheritedClass = null;
         Token ImplementedClass = null;
         ArrayList list1 = new ArrayList();
         HashMap<String, String> VarNames = new HashMap<String, String>();
         String MethodNames = null;
         Token type = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case PACKAGES:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PACKAGES:
          jj_consume_token(PACKAGES);
          break;
        case ID:
          jj_consume_token(ID);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    }
    jj_consume_token(PUBLIC);
    type = jj_consume_token(TYPE);
    idName = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      InheritedClass = jj_consume_token(ID);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      ImplementedClass = jj_consume_token(ID);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    list1 = AllInterFaces();
    jj_consume_token(OP);
    VarNames = GetVariableNames();
    MethodNames = GetMethodNames();
    jj_consume_token(OP);
     if(type.toString().equals("class"))
     {

                  id =  "class" + " " + idName.toString()+"\u005cn";
              if(InheritedClass != null)
              {
                id+= "class" + InheritedClass.toString()+ "<|--" +"class" + " " + idName.toString()+"\u005cn";
              }
                  if(ImplementedClass !=null)
                  {
                    id += ImplementedClass.toString() + "()-"+idName.toString()+"\u005cn";
                  }
                  if(list1!=null)
                  {
                    for(int i=0;i<list1.size();i++)
                    {
                      id+= list1.get(i).toString()+" "+"()-"+" "+idName.toString()+"\u005cn";

                        }
                  }
                  id+="class"+ " " + idName.toString()+"{";

                  Set setVariable = VarNames.entrySet();
                  Iterator iterator1 = setVariable.iterator();

                   while(iterator1.hasNext()) {
                  Map.Entry mentry = (Map.Entry)iterator1.next();
                  //System.out.println(mentry.getValue().toString());
                  if(mentry.getValue().toString().equals("int") || mentry.getValue().toString().equals("String") || mentry.getValue().toString().equals("float")||mentry.getValue().toString().equals("char"))
                          {
                                id+="\u005cn\u005ct"+mentry.getKey()+" : "+mentry.getValue();

                 }
                  else
                  {
                  dependencyMap.put(mentry.getValue().toString(),idName.toString());
                }

              }
                  id+="\u005cn"+MethodNames;
              id+="\u005cn}";



        }
        if(type.toString().equals("interface"))
        {
          id+="interface\u005ct"+idName.toString();

        }
        {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList AllInterFaces() throws ParseException {
   String AllInterface = new String();
   Token idName=null;
   ArrayList identifier = new ArrayList();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELIMITER:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(DELIMITER);
      idName = jj_consume_token(ID);
              identifier.add(idName.toString());
    }
          {if (true) return identifier;}
    throw new Error("Missing return statement in function");
  }

  final public HashMap GetVariableNames() throws ParseException {
  Token VarName=null;
  Token Dtype=null;
  HashMap<String, String> hm = new HashMap<String, String>();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATATYPE:
      case ID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATATYPE:
        Dtype = jj_consume_token(DATATYPE);
        VarName = jj_consume_token(ID);
        jj_consume_token(SEMICOLON);
     hm.put(VarName.toString(),Dtype.toString());
        break;
      case ID:
        Dtype = jj_consume_token(ID);
        VarName = jj_consume_token(ID);
        jj_consume_token(SEMICOLON);
     hm.put(VarName.toString(),Dtype.toString());
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return hm;}
    throw new Error("Missing return statement in function");
  }

  final public String GetMethodNames() throws ParseException {
  Token MethodName=null;
  Token Dtype=null;
  HashMap<String, String> hmap = new HashMap<String, String>();
  String id = "";
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(PUBLIC);
      Dtype = jj_consume_token(DATATYPE);
      MethodName = jj_consume_token(ID);
      jj_consume_token(OPENINGBRACKET);
      hmap = GetMethodVariables();
      jj_consume_token(OP);
      jj_consume_token(OP);
         id+=MethodName.toString()+"(";
         Set setVariable = hmap.entrySet();
                 Iterator iterator1 = setVariable.iterator();

                   while(iterator1.hasNext()) {
                  Map.Entry mentry = (Map.Entry)iterator1.next();
                  id+=mentry.getKey()+" : "+mentry.getValue();
              }


             id+=")"+":"+Dtype.toString();
    }
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public HashMap GetMethodVariables() throws ParseException {
  Token Dtype=null;
  Token VarName=null;
  HashMap<String, String> hm = new HashMap<String, String>();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATATYPE:
      case CLOSINGBRACKET:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATATYPE:
        Dtype = jj_consume_token(DATATYPE);
        VarName = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELIMITER:
          jj_consume_token(DELIMITER);
          break;
        case CLOSINGBRACKET:
          jj_consume_token(CLOSINGBRACKET);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
     hm.put(VarName.toString(),Dtype.toString());
        break;
      case CLOSINGBRACKET:
        jj_consume_token(CLOSINGBRACKET);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return hm;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SyntaxAnalyserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x821,0x800,0x60000,0x60000,0x80,0x100,0x200,0x22000,0x22000,0x20,0x6000,0x4200,0x6000,};
   }

  /** Constructor with InputStream. */
  public SyntaxAnalyser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SyntaxAnalyser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SyntaxAnalyserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SyntaxAnalyser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxAnalyserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SyntaxAnalyser(SyntaxAnalyserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SyntaxAnalyserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
