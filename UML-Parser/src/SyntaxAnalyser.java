/* Generated By:JavaCC: Do not edit this line. SyntaxAnalyser.java */
import java.io.*;
import java.io.FileWriter;
import java.nio.charset.*;
import net.sourceforge.plantuml.*;
import java.awt.image.*;
import javax.imageio.*;


public class SyntaxAnalyser implements SyntaxAnalyserConstants {
        public static void main(String args[])throws ParseException , IOException
        {
          String line = null;
          int i=0;
          String ClassName = "";
          FileInputStream fis = null;
          File file =new File("JavaInput.java");
          File outputFile = new File("umlInput.txt");
          FileWriter fw = new FileWriter(outputFile.getAbsoluteFile());
          BufferedWriter bw = new BufferedWriter(fw);
          FileReader fileReader = new FileReader(outputFile);
          BufferedReader bufferedReader = new BufferedReader(fileReader);
          StringBuffer stringBuffer = new StringBuffer();

                try
                {

                        String StartUml = "@startuml";
                        //bw.write(StartUml+'\n');

                        fis = new FileInputStream(file);
            SyntaxAnalyser analyser = new SyntaxAnalyser(fis);
            while(ClassName!="0")
            {
                ClassName = analyser.GetId();
                                StartUml+= "\u005cn"+ClassName+'\u005cn';
                                System.out.println(StartUml);

                        }

                                String EndUml = "@enduml";
                                StartUml += EndUml;
                                bw.append(StartUml);
                                bw.close();




/*
				ByteArrayOutputStream output = new ByteArrayOutputStream();
				SourceStringReader reader=new SourceStringReader("@startuml\nClass A\n@enduml");
				String desc =reader.generateImage(output);
				byte [] data = output.toByteArray();
				InputStream inputImageStream = new ByteArrayInputStream(data);
				BufferedImage umlImage = ImageIO.read(inputImageStream);
				ImageIO.write(umlImage, "png", new java.io.File("D:\\image.png"));

				System.out.print(desc);*/

                }catch(FileNotFoundException ex){
                        System.out.println("FIle not found");
                }catch(IOException ex)
                {
                  System.out.println("FIle not found1");
                }finally
                {

                }

}

  final public String GetId() throws ParseException {
        String className;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      className = GetKeywords();
    {if (true) return className;}
      break;
    case 0:
      jj_consume_token(0);
    {if (true) return "0";}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String GetKeywords() throws ParseException {
         String id = "";
        Token idName = null;
    jj_consume_token(PUBLIC);
    jj_consume_token(CLASS);
    idName = jj_consume_token(ID);
    id =  "class" + " " + idName.toString();
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SyntaxAnalyserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x21,};
   }

  /** Constructor with InputStream. */
  public SyntaxAnalyser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SyntaxAnalyser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SyntaxAnalyserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SyntaxAnalyser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxAnalyserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SyntaxAnalyser(SyntaxAnalyserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SyntaxAnalyserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[11];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 11; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
